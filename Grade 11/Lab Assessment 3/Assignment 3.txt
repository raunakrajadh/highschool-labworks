1. A man has planned to save part of his income on regular basis. For this, he has decided to save certain money in a bank every month. If he starts his deposit with 100 first month and every successive month he increases his deposit by Rs. 100 each, what amount he will be able to save in the period of 6 years' time. Write a C program to display each month's deposit with the calculation of the sum.

#include <stdio.h>

int main()
{
int i;
int deposit = 100;
int total = 0;

printf("Month\tDeposit\tTotal\n");
for (i = 1; i <= 72; i++)
{
printf("%d\t%d\t%d\n", i, deposit, total);
total += deposit;
deposit += 100;
}

printf("\nTotal amount saved in 6 years: %d\n", total);

return 0;
}


2. A man borrowed certain sum of money with a commitment that he would pay the sum on installment basis and the possible interest at the last. If his first installment was 10000 and then for every installment he decreased his payment by Rs. 100. He paid the total money, he had borrowed in 25 different installments and the total interest that of 10% of the total debt. Write a C program which displays the installment amount along with the total due he paid including interest.

#include <stdio.h>

int main()
{
int installment_amount = 10000;
int total_due = 0;
int interest = 0;
int total_borrowed = 0;

for (int i = 0; i < 25; i++)
{
total_due += installment_amount;
total_borrowed += installment_amount;
installment_amount -= 100;
}


3. Write a C program that calculates the total loan, which was paid on installment basis. The first installment amount was Rs. 100 and each successive ones were increased with Rs. 100 each. The payment was over by 30th installment. Also find out the interest that was charged as 10% of the total loan that he paid at the end.

#include <stdio.h>

int main()
{
int installment_amount = 100;
int total_loan = 0;
int interest = 0;

for (int i = 1; i <= 30; i++)
{
total_loan += installment_amount;
installment_amount += 100;
}

interest = total_loan * 0.1;

printf("Total loan paid: %d\n", total_loan);
printf("Interest charged: %d\n", interest);

return 0;
}


4. Write a C program, which asks you to input an integer and prints out the multiplication table of it upto 10 multiples.

#include <stdio.h>

int main()
{
int num;
printf("Enter an integer: ");
scanf("%d", &num);
printf("\nMultiplication table of %d:\n", num);
for (int i = 1; i <= 10; i++)
{
printf("%d x %d = %d\n", num, i, num * i);
}
return 0;
}


5. Write a C program, which displays the multiplication table of 1 upto 10 different integers with 10 multiples of each.

#include <stdio.h>

int main()
{
int i, j;

printf("Multiplication Table\n\n");

for (i = 1; i <= 10; i++)
{
printf("Table of %d\n", i);
for (j = 1; j <= 10; j++)
{
printf("%d x %d = %d\n", i, j, i * j);
}
printf("\n");
}

return 0;
}


6. Write a C program, which accepts an integer and displays it in reverse order with the sum of digits. [e.g. if input number 1234, output: 4321, sum of digits (1+2+3+4)=10]

#include <stdio.h>

int main()
{
int num, reversed = 0, remainder, sum = 0;

printf("Enter an integer: ");
scanf("%d", &num);

while(num != 0)
{
remainder = num % 10;
reversed = reversed * 10 + remainder;
sum += remainder;
num /= 10;
}

printf("Reversed number = %d\n", reversed);
printf("Sum of digits = %d\n", sum);

return 0;
}


7. Write a C program, which accepts an integer and find out whether it is a palindromic number. A palindromic number is the number, which is identical reading from both sides. E.g. 121, 1221 etc.

#include <stdio.h>

int main()
{
int num, reversedInteger = 0, remainder, originalInteger;

printf("Enter an integer: ");
scanf("%d", &num);

originalInteger = num;

// reversed integer is stored in reversedInteger
while( num!=0 )
{
remainder = num%10;
reversedInteger = reversedInteger*10 + remainder;
num /= 10;
}

// palindrome if orignalInteger and reversedInteger are equal
if (originalInteger == reversedInteger)
printf("%d is a palindrome.", originalInteger);
else
printf("%d is not a palindrome.", originalInteger);

return 0;
}


8. Write a C program that accepts an integer and find out the number of odd and even digits existed.

#include <stdio.h>

int main()
{
int num, even_count = 0, odd_count = 0;
printf("Enter an integer: ");
scanf("%d", &num);

while (num > 0)
{
int digit = num % 10;
if (digit % 2 == 0)
even_count++;
else
odd_count++;
num /= 10;
}

printf("Number of even digits: %d\n", even_count);
printf("Number of odd digits: %d\n", odd_count);

return 0;
}


9. Write a C program, which asks you to input an integer and finds out whether it is a prime or composite. 

#include <stdio.h>

int main()
{
int num, i, flag = 0;

printf("Enter a positive integer: ");
scanf("%d", &num);

for(i = 2; i <= num/2; ++i)
{
// condition for non-prime
if(num%i == 0)
{
flag = 1;
break;
}
}

if (flag == 0)
printf("%d is a prime number.", num);
else
printf("%d is not a prime number.", num);

return 0;
}


10. Write a C program to test whether a positive integer given by a user is an Armstrong number or not. [An Armstrong number is a number which is equal to sum of cube of its digit. E.g. 153=13+53+331

#include <stdio.h>

int main()
{
int num, originalNum, remainder, result = 0;

printf("Enter a three-digit integer: ");
scanf("%d", &num);

originalNum = num;

while (originalNum != 0)
{
remainder = originalNum % 10;
result += remainder * remainder * remainder;
originalNum /= 10;
}

if (result == num)
printf("%d is an Armstrong number.", num);
else
printf("%d is not an Armstrong number.", num);

return 0;
}


11. Write a C program, which displays all the prime numbers existing in between 1 and 100. 

#include <stdio.h>

int main()
{
int i, j;

printf("Prime numbers between 1 to 100 are: \n");

for(i=2; i<=100; i++)
{
for(j=2; j<=i; j++)
{
if(i%j==0)
break;
}
if(i==j)
{
printf("%d ",i);
}
}

return 0;
}


12. Write a C program, which displays the first 100 prime numbers.

#include <stdio.h>

int main()
{
int i, j, isPrime, count = 0;

printf("The first 100 prime numbers are: \n");

for(i=2; count<100; i++)
{
isPrime = 1;

for(j=2; j<=i/2; j++)
{
if(i%j==0)
{
isPrime = 0;
break;
}
}

if(isPrime==1)
{
printf("%d ",i);
count++;
}
}

return 0;
}


13. Write a C program, which accepts an integer and decompose it into its prime factors.

#include <stdio.h>

int main()
{
int n, i;
printf("Enter an integer: ");
scanf("%d", &n);
printf("The prime factors of %d are: ", n);
while (n % 2 == 0)
{
printf("2 ");
n = n/2;
}
for (i = 3; i <= n; i = i + 2)
{
while (n % i == 0)
{
printf("%d ", i);
n = n/i;
}
}
return 0;
}


14. Write a C program to display all the Armstrong numbers existing between 1 and 1000.

#include <stdio.h>

int main()
{
int num, originalNum, remainder, result = 0;

printf("Armstrong numbers between 1 to 1000 are: \n");

for(num = 1; num <= 1000; num++)
{
originalNum = num;

while (originalNum != 0)
{
remainder = originalNum%10;
result += remainder*remainder*remainder;
originalNum /= 10;
}

if(result == num)
printf("%d ",num);

result = 0;
}

return 0;
}


15. Write a C program, which asks you to input an integer and calculate the factorial of the same.

#include <stdio.h>

int main()
{
int num, i, factorial = 1;

printf("Enter an integer: ");
scanf("%d", &num);

if (num < 0)
printf("Error! Factorial of a negative number doesn't exist.");

else
{
for (i = 1; i <= num; ++i)
{
factorial *= i;
}
printf("Factorial of %d = %d", num, factorial);
}

return 0;
}


16. Write a C program to calculate H.C.F of any two numbers given.

#include <stdio.h>

int main()
{
int n1, n2, i, hcf;

printf("Enter two positive integers: ");
scanf("%d %d", &n1, &n2);

for(i=1; i <= n1 && i <= n2; ++i)
{
// Checks if i is factor of both integers
if(n1%i==0 && n2%i==0)
hcf = i;
}

printf("H.C.F of %d and %d is %d", n1, n2, hcf);

return 0;
}


17. Write a C program to find out L.C.M of any two given numbers.

#include <stdio.h>

int main()
{
int n1, n2, min;
printf("Enter two positive integers: ");
scanf("%d %d", &n1, &n2);

// maximum number between n1 and n2 is stored in min
min = (n1 > n2) ? n1 : n2;

while (1)
{
if (min % n1 == 0 && min % n2 == 0)
{
printf("The LCM of %d and %d is %d.", n1, n2, min);
break;
}
++min;
}
return 0;
}


18. A man has started to deposit money in a finance company. Every day he deposits double amount of the previous day. If he starts to deposit Rs. 1 in the first day, when he has to deposit Rs. 2147483448. Write a C program to find out it.

#include <stdio.h>

int main()
{
int amount = 1;
int day = 1;
while (amount < 2147483448)
{
amount *= 2;
day++;
}
printf("The man has to deposit Rs. 2147483448 on day %d", day);
return 0;
}


19. 19. 1, 2, 3, 4, 5, 6, 7, upto 100 with sum

#include <stdio.h>

int main()
{
int i, sum = 0;
printf("Series: ");
for(i=1; i<=100; i++)
{
printf("%d, ", i);
sum += i;
}
printf("\nSum: %d", sum);
return 0;
}


20. All odd numbers in between 1 and 100.

#include <stdio.h>

int main()
{
int i;
printf("All odd numbers between 1 and 100 are: \n");
for(i=1; i<=100; i++)
{
if(i%2!=0)
{
printf("%d\n",i);
}
}
return 0;
}


21. Even numbers in between 1 and 100.

#include <stdio.h>

int main()
{
int i;
printf("Even numbers between 1 and 100 are: \n");
for(i=2; i<=100; i+=2)
{
printf("%d\n",i);
}
return 0;
}


22. 2, 4, 6, 8, 10, 12 ... upto 100th term.

#include <stdio.h>

int main()
{
int i;
for (i = 2; i <= 100; i += 2)
{
printf("%d, ", i);
}
return 0;
}


23. 1, 3, 5, 7, 9, .... upto 100th term.

#include <stdio.h>

int main()
{
int i;
printf("The series is: \n");
for(i=1; i<=100; i+=2)
{
printf("%d, ",i);
}
return 0;
}


24. 3, 6, 9, 12, 15, 18, 21.. upto 25th term.

#include <stdio.h>

int main()
{
int i;
for (i = 3; i <= 25; i += 3)
{
printf("%d\t", i);
}
return 0;
}


25. 3, 9, 27, 81 ... upto 10th term.

#include <stdio.h>

int main()
{
int i;
int n = 3;
printf("The series is: \n");
for (i = 1; i <= 10; i++)
{
printf("%d ", n);
n = n * 3;
}
return 0;
}


26. 2, 4, 8, 16, 32, 64 upto 20th term.

#include <stdio.h>

int main()
{
int i;
int n = 2;
printf("The series is: \n");
for (i = 1; i <= 20; i++)
{
printf("%d ", n);
n = n * 2;
}
return 0;
}


27. -25, -20, -15, -10, -5, ... upto 25th term.

#include <stdio.h>

int main()
{
int i;
for (i = -25; i <= 25; i += 5)
{
printf("%d\t", i);
}
return 0;
}


28. 1000, 990, 980, 970 upto 20th term.

#include <stdio.h>

int main()
{
int i, n = 1000;
printf("The series is: \n");
for (i = 1; i <= 20; i++)
{
printf("%d, ", n);
n = n - 10;
}
return 0;
}


29. 1, 4, 9, 16, 25, 36, upto 15th term.

#include <stdio.h>

int main()
{
int i, n = 15;
printf("The series is: \n");
for (i = 1; i <= n; i++)
{
printf("%d, ", i * i);
}
return 0;
}


30. 1, 8, 27, 64, 125, 216, 343 upto 10th term.

#include <stdio.h>

int main()
{
int i, n = 10;
int series[n];
series[0] = 1;
for (i = 1; i < n; i++)
{
series[i] = series[i - 1] * 3;
}
printf("The series is: \n");
for (i = 0; i < n; i++)
{
printf("%d, ", series[i]);
}
return 0;
}


31. 2, 8, 18, 32, 50, 72... upto 15th term.

#include <stdio.h>

int main()
{
int i, n = 2;
printf("The series is: \n");
for (i = 1; i <= 15; i++)
{
printf("%d, ", n);
n += (i + 1) * 2;
}
return 0;
}


32. 3, 12, 27, 48, 75, 108... upto 10th term.

#include <stdio.h>

int main()
{
int i, n = 3;
printf("The series is: \n");
for (i = 1; i <= 10; i++)
{
printf("%d, ", n);
n = n + (i + 1) * (i + 2);
}
return 0;
}


33. 1000, 729, 512, 343, 216, 125, 64, 27, 8, 1.

#include <stdio.h>

int main()
{
int i = 1000;
while (i > 1)
{
printf("%d, ", i);
i = i / 3 * 2;
}
printf("1");
return 0;
}


34. 999, 728, 511, 342, 215, 124, upto 10th term.

#include <stdio.h>

int main()
{
int i, n = 999;
printf("The series is: \n");
for (i = 1; i <= 10; i++)
{
printf("%d ", n);
n = n - (n / 3);
}
return 0;
}


35. 5, 25, 125,.. ... upto 10th term.

#include <stdio.h>

int main()
{
int i, n = 5;
printf("The series is: \n");
for (i = 1; i <= 10; i++)
{
printf("%d ", n);
n = n * 5;
}
return 0;
}


36. 1, 1, 2, 3, 5, 8, 13, 21, 34, 55... ...upto 20th term (Fibonacci series of order 2).

#include <stdio.h>

int main()
{
int i, n1 = 0, n2 = 1, nextTerm;

printf("Fibonacci Series of order 2: ");

for (i = 1; i <= 20; ++i)
{
printf("%d, ", n1);
nextTerm = n1 + n2;
n1 = n2;
n2 = nextTerm;
}
return 0;
}


37. 1, 1, 1,3,5,9, 17,31,.... upto 25th term (Fibonacci series of order 3).

#include<stdio.h>
int main()
{
int i, a=1, b=1, c=1, d;
printf("Fibonacci series of order 3 upto 25th term is:\n");
printf("%d %d %d ",a,b,c);
for(i=4;i<=25;i++)
{
d=a+b+c;
printf("%d ",d);
a=b;
b=c;
c=d;
}
return 0;
}


38. 1, 11, 111, 1111, 11111, 111111, 1111111... upto 9th term

#include <stdio.h>

int main()
{
int i;
for (i = 1; i <= 9; i++)
{
printf("%d", i);
int j;
for (j = 1; j < i; j++)
{
printf("%d", i);
}
printf("\n");
}
return 0;
}


39. 1111111, 111111, 11111, 1111, 111, 11, 1

#include <stdio.h>

int main()
{
int i, j;
for(i=7; i>=1; i--)
{
for(j=1; j<=i; j++)
{
printf("1");
}
printf("\n");
}
return 0;
}


40. 1, 22, 333, 4444, 55555, 666666 ... upto 9th term

#include <stdio.h>

int main()
{
int i, j;
for (i = 1; i <= 9; i++)
{
for (j = 1; j <= i; j++)
{
printf("%d", i);
}
printf("\n");
}
return 0;
}


41. 999999999, 88888888, 7777777, . upto 9th term

#include <stdio.h>

int main()
{
int i, j;
for (i = 9; i >= 1; i--)
{
for (j = 1; j <= i; j++)
{
printf("%d", i);
}
printf("\n");
}
return 0;
}


42. 0.1, 0.11, 0.111, 0.1111, 0.11111, 0.111111, 0.1111111

#include <stdio.h>

int main()
{
float i;
for (i = 0.1; i <= 0.1111111; i = i + 0.01)
{
printf("%.7f\n", i);
}
return 0;
}


43. 0.1111111, 0.111111, 0.11111, 0.1111, 0.111, 0.11, 0.1

#include <stdio.h>

int main()
{
float num = 0.1111111;
int i;
for (i = 0; i < 7; i++)
{
printf("%.7f\n", num);
num = num * 0.1;
}
return 0;
}


44.  1, 2, 4, 7, 11, 16, 22, 29,.. upto 30th term 

#include <stdio.h>

int main()
{
int i, n = 1;
printf("1, ");
for (i = 1; i < 30; i++)
{
n = n + i;
printf("%d, ", n);
}
return 0;
}


45. 1, 2, 5, 6, 9, 10, 13, 14, 17, . upto 50th term.

#include <stdio.h>

int main()
{
int i;
for (i = 1; i <= 50; i++)
{
if (i % 3 == 0)
{
printf("%d, ", i + 1);
}
else
{
printf("%d, ", i);
}
}
return 0;
}


46.  2, 3, 4, 9, 8, 27, 16, 81, 32, 243, ... upto 20th term

#include <stdio.h>

int main()
{
int i, a = 2;
printf("2 ");
for (i = 1; i <= 20; i++)
{
if (i % 2 == 0)
a = a * a;
else
a = a * (a + 1);
printf("%d ", a);
}
return 0;
}


47. -30, 5, -25, 10, -20, 15, ...... upto 30th term

#include <stdio.h>

int main()
{
int i, n = 30;
int a = -30, b = 5;

printf("The series is: \n");
for (i = 1; i <= n; i++)
{
printf("%d, ", a);
a += b;
b += 5;
}
return 0;
}


48. 1, 12, 123, 1234, 12345, 123456, 1234567

#include <stdio.h>

int main()
{
int i, j;
for (i = 1; i <= 7; i++)
{
for (j = 1; j < i; j++)
{
printf("%d", j);
}
printf("\n");
}
return 0;
}


49. 1234567, 123456, 12345, 1234, 123, 12, 1

#include <stdio.h>

int main()
{
int i, j;
for(i=7; i>=1; i--)
{
for(j=1; j<=i; j++)
{
printf("%d", j);
}
printf("\n");
}
return 0;
}


50. 1, 13, 135, 1357, 13579

#include <stdio.h>

int main()
{
int i, j;
for (i = 1; i <= 13579; i = i + 12)
{
printf("%d, ", i);
}
return 0;
}


51. 2, 24, 246, 2468

#include <stdio.h>

int main()
{
int i;
for (i = 2; i <= 2468; i = i + 222)
{
printf("%d, ", i);
}
return 0;
}


52. 13579, 1357, 135, 13, 1

#include <stdio.h>

int main()
{
int i, j;
for(i=13579; i>=1; i=i/10)
{
for(j=i; j>=1; j=j/10)
{
printf("%d ", j%10);
}
printf("\n");
}
return 0;
}


53. 2468, 246, 24, 2

#include <stdio.h>

int main()
{
int i;
for(i=2468; i>=2; i-=222)
{
printf("%d\t", i);
}
return 0;
}


54. 1, 121, 12321, 1234321, 123454321, 12345654321, 1234567654321, 123456787654321

#include <stdio.h>

int main()
{
int i, j, k;
for (i = 1; i <= 8; i++)
{
for (j = 1; j <= i; j++)
{
printf("%d", j);
}
for (k = i - 1; k >= 1; k--)
{
printf("%d", k);
}
printf("\n");
}
return 0;
}


55. 123456787654321, 1234567654321, 12345654321, 123454321, 1234321, 12321, 121, 1

#include <stdio.h>

int main()
{
int i, j, k;
for (i = 1; i <= 7; i++)
{
for (j = 1; j <= i; j++)
{
printf("%d", j);
}
for (k = 7; k > i; k--)
{
printf("%d", k);
}
printf("\n");
}
return 0;
}


56. 1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, .... Upto 25th term

#include <stdio.h>

int main()
{
int i, n = 1;
printf("1, ");
for (i = 1; i <= 25; i++)
{
n = n + i;
printf("%d, ", n);
}
return 0;
}


57. 7,22, 11, 34, 17, 52, 26, 13, . ... Upto 25th term.

#include <stdio.h>

int main()
{
int i, n = 7;
printf("7, ");
for (i = 1; i <= 25; i++)
{
n = n + (i % 2 == 0 ? 15 : -13);
printf("%d, ", n);
}
return 0;
}














